<?php

/**
 * Implements hook_menu().
 *
 * adds the callback uri
 */
function commerce_postfinance_menu() {
  $items = array();

  // Define an always accessible path to receive IPNs.
  $items['commerce_postfinance/IPN/%'] = array(
    'page callback' => 'commerce_postfinance_process_ipn',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );


  return $items;
}


/**
 * Payment method callback: settings form.
 *
 * setup settingsform (defaultsettings)
 */
function commerce_postfinance_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $default_currency = variable_get('commerce_default_currency', 'CHF');

  $settings = (array) $settings + array(
    'PSPID' => '',
    'shop_uri' => 'Web-Shop',
    'currency_code' => in_array($default_currency, array_keys(commerce_postfinance_default_currencies())) ? $default_currency : 'CHF',
    'language' => 'DE',
    'server' => 'test',
    'server_encoding' => 'iso',
    'payment_security' => 'none',
    'payment_security_key' => '',
    'reply_security_key' => '',
    'order_prefix' => '',
    'template_page' => 'http://postfinance.alufelgenboerse.ch/TemplatePage.html',
  );

  $form['PSPID'] = array(
    '#type' => 'textfield',
    '#title' => t('PSPID'),
    '#description' => t('The PSPID you use for the Postfinance e-Payment account you want to receive payments.'),
    '#default_value' => $settings['PSPID'],
    '#required' => TRUE,
  );
  $form['shop_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Shop URI'),
    '#description' => t('Used as return url Merchant Shop, URI after '.url('<front>', array('absolute' => TRUE))),
    '#default_value' => $settings['shop_uri'],
    '#required' => TRUE,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_postfinance_default_currencies(),
    '#default_value' => $settings['currency_code'],
  );
  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('Default language submitted to Postfinance e-Payment'),
    '#options' => commerce_postfinance_default_languages(),
    '#default_value' => $settings['language'],
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Postfinance server'),
    '#options' => array(
      'test' => ('Test'),
      'prod' => ('Production'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['server_encoding'] = array(
    '#type' => 'radios',
    '#title' => t('The encoding you entered in the Postfinance e-Payment configuration'),
    '#options' => array(
      'iso' => ('ISO-8859-1'),
      'utf' => ('UTF-8'),
    ),
    '#default_value' => $settings['server_encoding'],
  );
  $form['payment_security'] = array(
    '#type' => 'radios',
    '#title' => t('Payment Security (SHA-IN and SHA-OUT)'),
    '#options' => array(
      'none' => t('none'),
      'sha1' => t('SHA-1'),
      'sha256' => t('SHA-256'),
      'sha512' => t('SHA-512'),
    ),
    '#default_value' => $settings['payment_security'],
  );
  $form['payment_security_key'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-X-IN Key'),
    '#description' => t('The Key you entered in the Postfinance e-Payment configuration'),
    '#default_value' => $settings['payment_security_key']
  );
  $form['reply_security_key'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-X-OUT Key'),
    '#description' => t('The Key you entered in the Postfinance e-Payment configuration'),
    '#default_value' => $settings['reply_security_key']
  );
  $form['order_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Orderprefix'),
    '#description' => t('This will be placed in front of the order number submitted to Postfinance e-Payment.'),
    '#default_value' => $settings['order_prefix']
  );
  $form['template_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Template Page'),
    '#description' => t('This .html file will be used as template file by Postfinance'),
    '#default_value' => $settings['template_page']
  );
  return $form;
}


/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a form.
 */
function commerce_postfinance_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['PSPID'])) {
    drupal_set_message(t('Postfinance e-Payment (Method: '.$payment_method['instance_id'].') is not configured for use. No PSPID has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
    
    //get the front-url
    'home_url' => url('<front>', array('absolute' => TRUE)),
  );

  return commerce_postfinance_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_postfinance_redirect_form_validate($order, $payment_method) {
  // TODO: Actually do what we can based on the POST information to validate
  // this was a successful payment (although actual transaction completion will
  // depend on the IPN).

  return TRUE;
}

/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *
 * @return
 *   A renderable form array.
 */
function commerce_postfinance_order_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $total = commerce_line_items_total($wrapper->commerce_line_items, 'product');
  $profile = commerce_customer_profile_load( $order->commerce_customer_billing['und']['0']['profile_id'] );


// Build the data array that will be translated into hidden form values.
  $data = array(


    // The store's PSPID
    'PSPID' => $settings['PSPID'],
    // Paymentmethod / Brand
    'PM' => $settings['PM'],
    'BRAND' => (!empty($settings['BRAND']) ? $settings['BRAND'] : ''),

    // Use the timestamp to generate a unique invoice number ?
    'orderID' => $settings['order_prefix'].$order->order_number, /* . ' - ' . time(),*/

    // Set the currency and language codes
    'currency' => in_array($total['currency_code'], array_keys(commerce_postfinance_default_currencies())) ? $total['currency_code'] : $settings['currency_code'],
    'language' => $settings['language'],

    // Define a single item in the cart representing the whole order
    'amount' => $total['amount'].'00',
     'tp' => $settings['template_page'],

    'COM' => t('Bestellung @order_number auf @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    'CN' => $profile->commerce_customer_address['und']['0']['name_line'],
    'owneraddress' => commerce_postfinance_buildadress($profile->commerce_customer_address['und']['0']),
    'ownerZIP' => $profile->commerce_customer_address['und']['0']['postal_code'],
    'ownertown' => $profile->commerce_customer_address['und']['0']['locality'],
    'ownercty' => $profile->commerce_customer_address['und']['0']['country'],
    'email' => $order->mail,

	'COMPLUS' => $settings['payment_method'],

    'homeurl' => $settings['home_url'],
    'accepturl' => $settings['return'],
    'backurl' => $settings['cancel_return'],
    'cancelurl' => $settings['cancel_return'],
    'declineurl' => $settings['cancel_return'],
    'catalogurl' => $settings['home_url'].$settings['shop_uri'],
    
  );
  $form['#action'] = commerce_postfinance_server_url($settings['server'], $settings['server_encoding']);

// order alphabetically as specified -- they already need to be in order in the form ...
$data = array_flip($data);
natcasesort($data);
$data = array_flip($data);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

$shaKey = $settings['payment_security_key'];
if(commerce_postfinance_security($shaKey,$settings['payment_security'])){
	//add a digest if specified
  $form['SHASign'] = array('#type' => 'hidden', '#value' => commerce_postfinance_shaDigest($data,$settings,'OUT'));
}

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Bezahlen'),
  );

  return $form;
}

/**
 * Processes an incoming IPN.
 *
 * @param $uri
 *   dynamic URI
 * @param $debug_ipn
 *   Optionally specify an IPN array for debug purposes; if left empty, the IPN
 *     be pulled from the $_POST. 
 *
 * @return
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 */
function commerce_postfinance_process_ipn($uri = NULL, $debug_ipn = array()) {
  // Retrieve the IPN from $_POST if the caller did not supply an IPN array.
  if (empty($debug_ipn)) {
    $ipn = $_POST;
  }
  else {
    $ipn = $debug_ipn;
  }

  if (!empty($ipn)) {


//Check if the Paymentmethod is in the return data
if(empty($ipn['COMPLUS'])){
    watchdog('commerce_postfinance', 'COMPLUS (payment_method) not set for an IPN', array(), WATCHDOG_ERROR);
	return FALSE;
}

$payment_method = commerce_payment_method_instance_load($ipn['COMPLUS']);
$settings = $payment_method['settings'];

$orderid = $ipn['orderID'];

$shaDigest = '';
$shaKey = $settings['reply_security_key'];
if(commerce_postfinance_security($shaKey,$settings['payment_security'])){
  $shaDigest = commerce_postfinance_shaDigest($ipn,$settings,'IN');
}

    if ($ipn['SHASIGN'] == $shaDigest) {
      watchdog('commerce_postfinance', 'received Callback for @oid / @uri / @state', array('@oid' => $orderid, '@uri'=>print_r($uri, true), '@state'=>$ipn['STATUS']),WATCHDOG_INFO);
      $oid = substr($orderid, strlen($settings['order_prefix']));
      $order = commerce_order_load($oid);
      
      $status = COMMERCE_PAYMENT_STATUS_FAILURE;
      if(empty($ipn['NCERROR']) || $ipn['NCERROR']=='0'){
      	$status = COMMERCE_PAYMENT_STATUS_SUCCESS;      	
      }else{
      	$errMSG = (!empty($ipn['NCERRORPLUS']) ? $ipn['NCERRORPLUS'] : '');
      	watchdog('commerce_postfinance', 'NCERROR (@code) @text', array('@code' => $ipn['NCERROR'], '@text'=>$errMSG),WATCHDOG_WARNING);
      }
      
      commerce_postfinance_transaction($payment_method, $order, $ipn, $status);
      
      //commerce_order_status_update($order, $status, FALSE); - this breaks the flow - user will get 404 ..
      return TRUE;
    } else {
	 watchdog('commerce_postfinance', 'IPN callback with wrong sign: Order @oid not updated - calculated digest @dig', array('@oid'=> $orderid, '@dig' => $shaDigest),WATCHDOG_WARNING);

    foreach ($ipn as $name => $value) {
	    watchdog('commerce_postfinance', 'received > @name: @val', array('@name' => $name, '@val' => $value),WATCHDOG_DEBUG);
      }
	
    }
  }
return FALSE;

}

/**
 * Save the payment transaction for the order.
 */
function commerce_postfinance_transaction($payment_method, $order, $response, $transaction_status) {
  $transaction = commerce_payment_transaction_new('commerce_postfinance', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $transaction->remote_id = $response['PAYID'];

  $transaction->status = $transaction_status;
  if ($transaction_status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    $transaction->message = 'Transaction accepted for @orderid';
  }
  elseif ($transaction_status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    $transaction->message = 'Error for the transaction  for @orderid';
  }
  $transaction->message_variables = array(
    '@orderid' => $response['orderID'],
  );
  commerce_payment_transaction_save($transaction);
}

/**
 * Returns the URL to the specified Postfinance server.
 *
 * @param $server
 *   Either test or prod indicating which server to get the URL for.
 * @param $encoding
 *   ISO of UTF to determine the used Server URL
 *
 * @return
 *   The URL to use to submit requests to the Postfinance server.
 */
function commerce_postfinance_server_url($server, $encoding) {
  switch ($encoding) {
    case 'iso':
      return 'https://e-payment.postfinance.ch/ncol/'.$server.'/orderstandard.asp';
    case 'utf':
      return 'https://e-payment.postfinance.ch/ncol/'.$server.'/orderstandard_utf8.asp';
  }
}

/*
* Creates the address string
*/
function commerce_postfinance_buildadress($profileFormValues) {
  return trim($profileFormValues['thoroughfare'] .' '. $profileFormValues['premise'] . ' '. $profileFormValues['sub_premise']. ' '.$profileFormValues['dependent_locality']);
}

/*
* Calculates the Digest
*/
function commerce_postfinance_shaDigest($data, $settings, $shaAct) {

$shaDigest = '';
$shavalue = '';

$shaKey = $settings['payment_security_key'];
$shaParams = commerce_postfinance_shaOUTparams();
if($shaAct == 'IN'){
$shaKey = $settings['reply_security_key'];
$shaParams = commerce_postfinance_shaINparams();
}

// order alphabetically as specified
$data = array_flip($data);
natcasesort($data);
$data = array_flip($data);

  foreach ($data as $name => $value) {
    $nameU = strtoupper($name);
    if( strlen($value) > 0 && in_array($nameU, array_keys($shaParams))){
	$shavalue .= $nameU.'='.$value.$shaKey;
    }/*else{
watchdog('commerce_postfinance', 'IGN > @name: @val', array('@name' => $name, '@val' => $value),WATCHDOG_DEBUG);
    }*/
  }

 $shaDigest = bin2hex(mhash(commerce_postfinance_security($shaKey,$settings['payment_security']),$shavalue));
/*watchdog('commerce_postfinance', 'received > @name: @val', array('@name' => $shaDigest, '@val' => $shavalue),WATCHDOG_DEBUG);*/
return strtoupper($shaDigest);
}

function commerce_postfinance_security($key, $security) {
  if($key==''){return false;}
  switch ($security) {
    case 'none':
      return false;
    case 'sha1':
      return MHASH_SHA1;
    case 'sha256':
      return MHASH_SHA256;
    case 'sha512':
      return MHASH_SHA512;
  }
return false;
}

/**
 * Returns an array of all possible language codes.
 */
function commerce_postfinance_default_languages() {
  return drupal_map_assoc(array( 'de_DE', 'fr_FR', 'it_IT', 'es_ES', 'en_US'),'commerce_postfinance_transform_languages');
}
/**
 * Transforms language codes user-readalbe
 */
function commerce_postfinance_transform_languages($n){
  return substr($n, -2);
}

/**
 * Returns an array of all possible currency codes.
 */
function commerce_postfinance_default_currencies() {
  return drupal_map_assoc(array('CHF','EUR'));
}

/**
 * Returns an array of all specified SHA-OUT Parameters.
 */
function commerce_postfinance_shaOUTparams(){
return drupal_map_assoc(array('ACCEPTURL','ADDMATCH','ADDRMATCH','AIAIRNAME','AIAIRTAX','AIBOOKIND*XX*','AICARRIER*XX*','AICHDET','AICLASS*XX*','AICONJTI','AIDESTCITY*XX*','AIDESTCITYL*XX*','AIEXTRAPASNAME*XX*','AIEYCD','AIFLDATE*XX*','AIFLNUM*XX*','AIIRST','AIORCITY*XX*','AIORCITYL*XX*','AIPASNAME','AISTOPOV*XX*','AITIDATE','AITINUM','AITYPCH','AIVATAMNT','AIVATAPPL','ALIAS','ALIASOPERATION','ALIASUSAGE','ALLOWCORRECTION','AMOUNT','AMOUNT*XX*','AMOUNTHTVA','AMOUNTTVA','BACKURL','BGCOLOR','BRAND','BRANDVISUAL','BUTTONBGCOLOR','BUTTONTXTCOLOR','CANCELURL','CARDNO','CATALOGURL','CAVV_3D','CAVVALGORITHM_3D','CERTID','CHECK_AAV','CIVILITY','CN','COM','COMPLUS','COSTCENTER','COSTCODE','CREDITCODE','CUID','CURRENCY','CVC','DATA','DATATYPE','DATEIN','DATEOUT','DECLINEURL','DISCOUNTRATE','ECI','ECOM_BILLTO_POSTAL_CITY','ECOM_BILLTO_POSTAL_COUNTRYCODE','ECOM_BILLTO_POSTAL_NAME_FIRST','ECOM_BILLTO_POSTAL_NAME_LAST','ECOM_BILLTO_POSTAL_POSTALCODE','ECOM_BILLTO_POSTAL_STREET_LINE1','ECOM_BILLTO_POSTAL_STREET_LINE2','ECOM_BILLTO_POSTAL_STREET_NUMBER','ECOM_CONSUMERID','ECOM_CONSUMERORDERID','ECOM_CONSUMERUSERALIAS','ECOM_PAYMENT_CARD_EXPDATE_MONTH','ECOM_PAYMENT_CARD_EXPDATE_YEAR','ECOM_PAYMENT_CARD_NAME','ECOM_PAYMENT_CARD_VERIFICATION','ECOM_SHIPTO_COMPANY','ECOM_SHIPTO_DOB','ECOM_SHIPTO_ONLINE_EMAIL','ECOM_SHIPTO_POSTAL_CITY','ECOM_SHIPTO_POSTAL_COUNTRYCODE','ECOM_SHIPTO_POSTAL_NAME_FIRST','ECOM_SHIPTO_POSTAL_NAME_LAST','ECOM_SHIPTO_POSTAL_POSTALCODE','ECOM_SHIPTO_POSTAL_STREET_LINE1','ECOM_SHIPTO_POSTAL_STREET_LINE2','ECOM_SHIPTO_POSTAL_STREET_NUMBER','ECOM_SHIPTO_TELECOM_FAX_NUMBER','ECOM_SHIPTO_TELECOM_PHONE_NUMBER','ECOM_SHIPTO_TVA','ED','EMAIL','EXCEPTIONURL','EXCLPMLIST','EXECUTIONDATE*XX*','FIRSTCALL','FLAG3D','FONTTYPE','FORCECODE1','FORCECODE2','FORCECODEHASH','FORCEPROCESS','FORCETP','GENERIC_BL','GIROPAY_ACCOUNT_NUMBER','GIROPAY_BLZ','GIROPAY_OWNER_NAME','GLOBORDERID','GUID','HDFONTTYPE','HDTBLBGCOLOR','HDTBLTXTCOLOR','HEIGHTFRAME','HOMEURL','HTTP_ACCEPT','HTTP_USER_AGENT','INCLUDE_BIN','INCLUDE_COUNTRIES','INVDATE','INVDISCOUNT','INVLEVEL','INVORDERID','ISSUERID','ITEMCATEGORY*XX*','ITEMDISCOUNT*XX*','ITEMID*XX*','ITEMNAME*XX*','ITEMPRICE*XX*','ITEMQUANT*XX*','ITEMUNITOFMEASURE*XX*','ITEMVATCODE*XX*','LANGUAGE','LEVEL1AUTHCPC','LIDEXCL*XX*','LIMITCLIENTSCRIPTUSAGE','LINE_REF','LIST_BIN','LIST_COUNTRIES','LOGO','MERCHANTID','MODE','MTIME','MVER','NETAMOUNT','OPERATION','ORDERID','ORIG','OR_INVORDERID','OR_ORDERID','OWNERADDRESS','OWNERADDRESS2','OWNERCTY','OWNERTELNO','OWNERTOWN','OWNERZIP','PAIDAMOUNT','PARAMPLUS','PARAMVAR','PAYID','PAYMETHOD','PM','PMLIST','PMLISTPMLISTTYPE','PMLISTTYPE','PMLISTTYPEPMLIST','PMTYPE','POPUP','POST','PSPID','PSWD','REF','REFER','REFID','REFKIND','REF_CUSTOMERID','REF_CUSTOMERREF','REMOTE_ADDR','REQGENFIELDS','RTIMEOUT','RTIMEOUTREQUESTEDTIMEOUT','SCORINGCLIENT','SETT_BATCH','SID','STATUS_3D','SUBSCRIPTION_ID','SUB_AM','SUB_AMOUNT','SUB_COM','SUB_COMMENT','SUB_CUR','SUB_ENDDATE','SUB_ORDERID','SUB_PERIOD_MOMENT','SUB_PERIOD_MOMENT_M','SUB_PERIOD_MOMENT_WW','SUB_PERIOD_NUMBER','SUB_PERIOD_NUMBER_D','SUB_PERIOD_NUMBER_M','SUB_PERIOD_NUMBER_WW','SUB_PERIOD_UNIT','SUB_STARTDATE','SUB_STATUS','TAAL','TAXINCLUDED*XX*','TBLBGCOLOR','TBLTXTCOLOR','TID','TITLE','TOTALAMOUNT','TP','TRACK2','TXTBADDR2','TXTCOLOR','TXTOKEN','TXTOKENTXTOKENPAYPAL','TYPE_COUNTRY','UCAF_AUTHENTICATION_DATA','UCAF_PAYMENT_CARD_CVC2','UCAF_PAYMENT_CARD_EXPDATE_MONTH','UCAF_PAYMENT_CARD_EXPDATE_YEAR','UCAF_PAYMENT_CARD_NUMBER','USERID','USERTYPE','VERSION','WBTU_MSISDN','WBTU_ORDERID','WEIGHTUNIT','WIN3DS','WITHROOT'));
}

/**
 * Returns an array of all specified SHA-IN Parameters.
 */
function commerce_postfinance_shaINparams(){
return drupal_map_assoc(array('AAVADDRESS', 'AAVCHECK', 'AAVZIP', 'ACCEPTANCE', 'ALIAS', 'AMOUNT', 'BRAND', 'CARDNO', 'CCCTY', 'CN', 'COMPLUS', 'CREATION_STATUS', 'CURRENCY', 'CVCCHECK', 'DCC_COMMPERCENTAGE', 'DCC_CONVAMOUNT', 'DCC_CONVCCY', 'DCC_EXCHRATE', 'DCC_EXCHRATESOURCE', 'DCC_EXCHRATETS', 'DCC_INDICATOR', 'DCC_MARGINPERCENTAGE', 'DCC_VALIDHOURS', 'DIGESTCARDNO', 'ECI', 'ED', 'ENCCARDNO', 'IP', 'IPCTY', 'NBREMAILUSAGE', 'NBRIPUSAGE', 'NBRIPUSAGE_ALLTX', 'NBRUSAGE', 'NCERROR', 'ORDERID', 'PAYID', 'PM', 'SCO_CATEGORY', 'SCORING', 'STATUS', 'SUBSCRIPTION_ID', 'TRXDATE', 'VC'));
}
